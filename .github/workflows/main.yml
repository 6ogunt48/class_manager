name: Continuous Integration and Delivery
on: [push]


env:
  IMAGE: ghcr.io/$(echo $GITHUB_REPOSITORY | tr '[A-Z]' '[a-z]')/class_manager

jobs:
  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: main

      - name: Login to Github Packages
        run: echo ${GITHUB_TOKEN} | docker login -u ${GITHUB_ACTOR} --password-stdin ghcr.io
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull image
        run: docker pull ${{ env.IMAGE }}:latest || true

      - name: Build image
        run: |
          docker buildx build \
            --platform linux/amd64 \
            --cache-from ${{ env.IMAGE }}:latest \
            --tag ${{ env.IMAGE }}:latest \
            --file ./classmanager/Dockerfile.prod \
            "./classmanager"

      - name: Push image
        run: docker push ${{ env.IMAGE }}:latest

  test:
    name: Test Docker image
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Login to Github Packages
        run: echo ${GITHUB_TOKEN} | docker login -u ${GITHUB_ACTOR} --password-stdin ghcr.io
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull image
        run: docker pull ${{ env.IMAGE }}:latest || true

      - name: Run container
        run: |
          docker run \
            -d \
            --name class-manager-test \
            -e PORT=8765 \
            -e ENVIRONMENT=dev \
            -e DATABASE_URL=sqlite://sqlite.db \
            -e DATABASE_TEST_URL=sqlite://sqlite.db \
            -p 5003:8765 \
            ${{ env.IMAGE }}:latest

      - name: Install requirements
        run: docker exec class-manager-test pip install black flake8 isort pytest bandit safety httpx pytest-cov
      - name: Pytest
        run: docker exec class-manager-test python -m pytest .
      - name: Flake8
        run: docker exec class-manager-test python -m flake8 .
      - name:  isort
        run: docker exec class-manager-test python -m isort . --check-only
      - name: bandit
        run: docker exec class-manager-test python -m bandit -r ./application
      - name: safety
        run: docker exec class-manager-test python -m safety check


  deploy:
    name: Deploy to Heroku
    runs-on: ubuntu-latest
    needs: [build, test]
    env:
      HEROKU_APP_NAME: cryptic-atoll-40927
      HEROKU_REGISTRY_IMAGE: registry.heroku.com/${HEROKU_APP_NAME}/web
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: main
      - name: Login to Github Packages
        run: echo ${GITHUB_TOKEN} | docker login -u ${GITHUB_ACTOR} --password-stdin ghrc.io
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Pull image
        run: |
          docker pull ${{ env.IMAGE }}:latest || true
      - name: Build image
        run: |
          docker build \
          --cache-from ${{ env.IMAGE }}:latest \
          --tag ${{ env.HEROKU_REGISTRY_IMAGE }}:latest \
          --file ./classmanager/Dockerfile.prod \
          "./classmanager"
      - name: Login to Heroku Container registry
        run: docker login -u _ -p ${HEROKU_AUTH_TOKEN} registry.heroku.com
        env:
          HEROKU_AUTH_TOKEN: ${{ secrets.HEROKU_AUTH_TOKEN }}
      - name: Push to the registry
        run: docker push ${{ env.HEROKU_REGISTRY_IMAGE }}
      - name: Set env variables
        run: |
          echo "HEROKU_REGISTRY_IMAGE=${{ env.HEROKU_REGISTRY_IMAGE }}" >> $GITHUB_ENV
          echo "HEROKU_AUTH_TOKEN=${{ secrets.HEROKU_AUTH_TOKEN }}" >> $GITHUB_ENV
      - name: Release
        run: |
          chmod +x ./release.sh
          ./release.sh
